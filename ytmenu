#!/usr/bin/env sh

# ytmenu
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# Project repository: https://github.com/demonkingswarn/ytmenu

VERSION="1.4.5"

YOUTUBE_URL="https://youtube.com"
INVIDIOUS_URL="https://vid.puffyan.us"

player_fn="mpv"

download_dir="$HOME/Downloads/ytmenu"

logfile="${XDG_CACHE_HOME:-$HOME/.cache}/yt-hsts"
logdir="${XDG_CACHE_HOME:-$HOME/.cache}"

# create history directory and history file if none found
[ -d "$logdir" ] || mkdir "$logdir"
[ -f "$logfile" ] || : > "$logfile"

# Allow the user to customize the defaults
config_dir="${XDG_CONFIG_HOME:-$HOME/.config}"
[ -e "$config_dir/ytmenurc" ] && . "$config_dir/ytmenurc"

c_red="\033[1;31m"
c_green="\033[1;32m"
c_yellow="\033[1;33m"
c_blue="\033[1;34m"
c_magenta="\033[1;35m"
c_cyan="\033[1;36m"
c_reset="\033[0m"

help_text() {
	while IFS= read -r line; do
		printf "%s\n" "$line"
	done <<-EOF

	Usage:
	  ${0##*/} [-s]
	  ${0##*/} [-v]
	  ${0##*/} -h | -U | -V

	Options:
	-h show helptext
	-v use VLC as the media player
	-U fetch update from github
	-V print version number and exit
	-s play audio from a yt video
	-d downloads the video
	-H play from history
	EOF
}

version_text() {
	inf "Version: $VERSION" >&2
}

die() {
	err "$*"
	exit 1
}

err() {
	printf "\033[1;31m%s\033[0m\n" "$*" >&2
}

inf() {
	printf "\033[1;32m%s \033[1;35m%s\033[0m\n" "$1" "$2"
}

input() {
	[ -z "$*" ] && printf "${c_magenta}Search YouTube:${c_reset} " && read -r query || query="$*"
	search_yt
}

update_script() {
	#Get the newest version of the script
	update="$(curl -sL "https://raw.githubusercontent.com/DemonKingSwarn/ytmenu/main/ytmenu" | diff -u "$0" -)"
	if [ -z "$update" ]; then
		inf "Script is up to date :)"
	else
		if printf '%s\n' "$update" | patch "$0" - ; then
			inf "Script has been updated"
		else
			inf "Can't update for some reason!"
		fi
	fi
}

dep_ch() {
	for dep; do
		if ! command -v "$dep" > /dev/null ; then
			err "Program \"$dep\" not found. Please install it.\n"
			[ "$dep" = "yt-dlp" ] && err "To install yt-dlp, Type pip install -U yt-dlp"
			die
		fi
	done
}

search_yt() {
	search=$(echo "${query}" | sed 's/ /+/g')
	url="$YOUTUBE_URL/$(curl -s "$INVIDIOUS_URL/search?q=$search" | grep -Eo "watch\?v=.{11}" | head -n 1)"
	append_history
	"$player_fn" "$url" > /dev/null
}

download() {
	dep_ch "yt-dlp"
	
	search=$(echo "${query}" | sed 's/ /+/g')
	url="$YOUTUBE_URL/$(curl -s "$INVIDIOUS_URL/search?q=$search" | grep -Eo "watch\?v=.{11}" | head -n 1)"
	mkdir -p "$download_dir"
	cd "$download_dir"
	append_history
	yt-dlp "$url"
}

play_audio() {
	search=$(echo "${query}" | sed 's/ /+/g')
	url="$INVIDIOUS_URL/$(curl -s "$INVIDIOUS_URL/search?q=$search" | grep -Eo "watch\?v=.{11}" | head -n 1)"
	audio="$url&listen=1"
	append_history
	"$player_fn" "$audio" > /dev/null
}

append_history() {
	grep -q -w "${url}" "${logfile}" || printf "%s\t%s\n" "$url" >> "$logfile"
}

play_history() {
	dep_ch "fzf"

	choose=$(cat "$logfile" | fzf)
	"$player_fn" "$choose"
}
	
trap 'printf "\033[0m";[ -f "$logfile".new ] && rm "$logfile".new;exit 1' INT HUP

while getopts 'vq:dp:shHDUVa:' OPT; do
	case $OPT in
		h)
			help_text
			exit 0
			;;
		v)
			player_fn="vlc"
			;;
		U)
			update_script
			exit 0
			;;
		V)
			version_text
			exit 0
			;;
		s)
			play_audio
			;;
		d)	
			download
			;;
		H)
			play_history
			;;
		*)
			help_text
			exit 0
			;;
	esac
done
shift $((OPTIND - 1))

input "$*"

# Checks for the main dependencies
dep_ch "sed" "curl" "grep" "git"
